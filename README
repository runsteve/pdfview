# 智能网页内容分析与检索系统

一个基于AI的网页内容理解与交互系统，能够实现网页内容的智能检索、相关内容高亮显示以及智能问答功能。

## 核心功能

### 内容理解与存储
- 自动抓取并解析网页内容
- 利用AI模型处理文本和图片内容
- 将处理后的内容编码存入RAG（检索增强生成）数据库

### 智能检索与高亮
- 支持文本段落选择检索
- 支持图片内容检索
- 自动高亮显示相关联的文本和图片
- 基于语义相似度的智能匹配

### AI 问答交互
- 基于选中内容进行上下文相关的问答
- 利用RAG技术提供更准确的答案
- 支持多轮对话交互

## 技术架构

### 后端
- Flask：Web服务器框架
- BeautifulSoup4：网页内容解析
- 向量数据库：存储编码后的内容
- AI 模型：用于内容理解和问答

### 前端
- React：用户界面框架
- Vite：构建工具
- 自定义高亮组件

## 开发进度

### 已完成
- [x] 网页内容抓取与解析
- [x] 文本和图片内容的提取

### 进行中
- [ ] AI模型集成
- [ ] RAG数据库构建
- [ ] 内容编码与存储
- [ ] 相关内容检索
- [ ] 高亮显示功能
- [ ] AI问答系统

### 计划功能
- [ ] 多模态内容理解
- [ ] 智能摘要生成
- [ ] 知识图谱构建
- [ ] 个性化推荐

## 使用流程

1. 输入目标网页URL
2. 系统自动处理并存储网页内容
3. 用户可以选择文本或点击图片
4. 系统自动检索相关内容并高亮显示
5. 用户可以基于选中内容进行AI问答

## 技术要点

- 使用大语言模型进行内容理解
- 向量化处理实现语义检索
- 实时高亮渲染
- 上下文感知的问答系统

## 环境要求

- Python 3.8+
- Node.js 16+
- GPU支持（推荐用于AI模型推理）

## 后续规划

- 优化检索算法
- 提升问答准确度
- 支持更多类型的内容理解
- 添加用户反馈机制
- 引入更多AI模型能力

## 注意事项

- 需要配置适当的AI模型接口
- 确保有足够的存储空间用于向量数据库
- 注意网页内容的版权问题
## 安装说明

1. 克隆项目到本地

2. 安装后端依赖

pip install -r requirements.txt
cd frontend
npm install
python app.py
cd frontend
npm run dev